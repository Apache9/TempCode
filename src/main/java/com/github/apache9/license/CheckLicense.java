package com.github.apache9.license;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang.mutable.Mutable;
import org.apache.commons.lang.mutable.MutableInt;
import org.apache.commons.lang.mutable.MutableLong;

public class CheckLicense {

    private static final Pattern AUTHOR = Pattern.compile(".*Author: (.*)");

    private static void check(File file, Map<String, MutableInt> authors, MutableLong totalCount,
            MutableLong differentAuthorCount, MutableLong invalidCount) throws IOException {
        if (file.isDirectory()) {
            for (File sub : file.listFiles()) {
                check(sub, authors, totalCount, differentAuthorCount, invalidCount);
            }
        } else {
            if (file.getName().endsWith(".ico") || file.getName().endsWith(".gif") || file.getName().endsWith(".png")
                    || file.getName().endsWith(".jpg") || file.getName().equals(".gitignore")) {
                return;
            }
            totalCount.increment();
            try {
                for (String line : Files.readAllLines(file.toPath())) {
                    if (line.contains("This file is autogenerated: PLEASE DO NOT EDIT IT")) {
                        return;
                    }
                    Matcher matcher = AUTHOR.matcher(line.trim());
                    if (matcher.matches()) {
                        String author = matcher.group(1);
                        if (author.contains("Gregory Nutt")) {
                            return;
                        }
                        System.out.print("Author: " + author + ", ");
                        authors.computeIfAbsent(author, k -> new MutableInt()).increment();
                        differentAuthorCount.increment();
                        break;
                    }
                }
            } catch (IOException e) {
                System.out.println("ERROR: " + e.toString() + ", " + file.getCanonicalPath());
            }
            invalidCount.increment();
            System.out.println(file.getCanonicalPath());
        }
    }

    public static void main(String[] args) throws IOException {
        File base = new File("/home/zhangduo/nuttx/code");
        Map<String, MutableInt> authors = new TreeMap<>();
        MutableLong totalCount = new MutableLong();
        MutableLong differentAuthorCount = new MutableLong();
        MutableLong invalidCount = new MutableLong();
        check(base, authors, totalCount, differentAuthorCount, invalidCount);
        System.out.println("Total files: " + totalCount.longValue());
        System.out.println("Invalid files: " + invalidCount.longValue());
        System.out.println("Files with different authors: " + differentAuthorCount.longValue());
        authors.forEach((k, v) -> System.out.println(k + ": " + v + " files"));
    }
}
